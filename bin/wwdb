#!/usr/bin/env perl

=head1 NAME

wwdb - export and import webwork databases.

=head1 SYNOPSIS

 wwdb [-f] course { import | export } file [table ...]

=head1 DESCRIPTION

Exports data from a course database to an XML file, or imports data from an XML
file to a course database. Optionally restrict which tables are imported or
exported and specify a duplicate policy.

=head1 OPTIONS

=over

=item -f

Overwite duplicate records.

=item course

Course to use for import or export.

=item { import | export }

Specify action -- export or import data.

=item file

XML file to write to (in the case of export) or read from (in the case of
import).

=item [table ...]

If specified, only the listed tables will be imported or exported.

=back

=cut

use strict;
use warnings;
use Getopt::Std;

BEGIN {
	use Mojo::File qw(curfile);
	use Env qw(WEBWORK_ROOT);

	$WEBWORK_ROOT = curfile->dirname->dirname;
}

use lib "$ENV{WEBWORK_ROOT}/lib";

use WeBWorK::CourseEnvironment;
use WeBWorK::DB;
use WeBWorK::Utils::DBImportExport qw/listTables dbExport dbImport/;

sub usage {
	print STDERR "usage: $0 [-f] course { import | export } file [table ...]\n";
	print STDERR "tables: ", join(" ", listTables()), "\n";
	exit 1;
}

our $opt_f;
getopts("f");

my ($course, $command, $file, @tables) = @ARGV;

usage() unless $course and $command and $file;

my $ce = WeBWorK::CourseEnvironment->new({
	webwork_dir => $ENV{WEBWORK_ROOT},
	courseName  => $course,
});

my $db = WeBWorK::DB->new($ce->{dbLayout});

my @errors;

if ($command eq "export") {
	my $fh;
	if ($file eq "-") {
		$fh = *STDOUT;
	} else {
		open $fh, ">", $file or die "failed to open file '$file' for writing: $!\n";
	}
	@errors = dbExport(
		db => $db,
		xml => $fh,
		tables => \@tables,
	);
	close $fh;
} elsif ($command eq "import") {
	my $conflict = ($opt_f ? "replace" : "skip");
	open my $fh, "<", $file or die "failed to open file '$file' for writing: $!\n";
	@errors = dbImport(
		db => $db,
		xml => $fh,
		tables => \@tables,
		conflict => $conflict,
	);
	close $fh;
} else {
	die "$command: unrecognized command.\n";
}

if (@errors) {
	warn "The following errors occurred:\n", map { "* $_\n" } @errors;
	exit 1;
}
